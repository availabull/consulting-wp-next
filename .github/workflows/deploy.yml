name: Deploy stack

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # ────────────────── 1 · Checkout ──────────────────
    - uses: actions/checkout@v4

    # ────────────────── 2 · GHCR login ────────────────
    - name: Log in to GHCR
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | \
        docker login ghcr.io -u "${{ github.actor }}" --password-stdin

    # ────────────────── 3 · Build & push WordPress ────
    - name: Build & push WordPress
      run: |
        docker build -t ghcr.io/${{ github.repository }}/wp:${{ github.sha }} wordpress
        docker push     ghcr.io/${{ github.repository }}/wp:${{ github.sha }}

    # ────────────────── 4 · Build & push Next.js ──────
    - name: Build & push Next.js
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_WPGRAPHQL_URL=http://wordpress/graphql \
          -t ghcr.io/${{ github.repository }}/next:${{ github.sha }} nextjs-site
        docker push     ghcr.io/${{ github.repository }}/next:${{ github.sha }}

    # ────────────────── 5 · Deploy on droplet ─────────
    - name: Deploy on droplet
      uses: appleboy/ssh-action@v1
      with:
        host:     ${{ secrets.DO_HOST }}
        username: root
        key:      ${{ secrets.DO_SSH_KEY }}
        script: |
          set -eu
          mkdir -p /srv/consultancy
          cd /srv/consultancy

          # ---------- docker‑compose.yml ----------
          cat > docker-compose.yml <<'COMPOSE'
          version: '3.9'

          services:
            db:
              image: mariadb:11
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                MYSQL_DATABASE: wp
              volumes: [ "db_data:/var/lib/mysql" ]

            wordpress:
              image: ghcr.io/${{ github.repository }}/wp:${{ github.sha }}
              restart: unless-stopped
              env_file:
                - .env          # safe vars for Compose itself
                - stack.env     # salts & keys (may contain $)
              environment:
                DB_NAME:     wp
                DB_USER:     root
                DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                DB_HOST:     db
                WP_ENV:      production
                WP_HOME:     https://wp.robertfisher.com
                WP_SITEURL:  https://wp.robertfisher.com/wp
              expose: [ "80" ]
              volumes: [ "uploads:/var/www/html/web/app/uploads" ]
              labels:
                - traefik.enable=true
                - traefik.http.routers.wp.rule=Host(`wp.robertfisher.com`)
                - traefik.http.routers.wp.entrypoints=websecure
                - traefik.http.routers.wp.tls.certresolver=cf
                - traefik.http.services.wp.loadbalancer.server.port=80
              depends_on: [ db ]

            next:
              image: ghcr.io/${{ github.repository }}/next:${{ github.sha }}
              restart: unless-stopped
              environment:
                NEXT_PUBLIC_WPGRAPHQL_URL: http://wordpress/graphql
              expose: [ "3000" ]
              labels:
                - traefik.enable=true
                - traefik.http.routers.next.rule=Host(`robertfisher.com`) || Host(`www.robertfisher.com`)
                - traefik.http.routers.next.entrypoints=websecure
                - traefik.http.routers.next.tls.certresolver=cf
                - traefik.http.services.next.loadbalancer.server.port=3000
              depends_on: [ wordpress ]

            traefik:
              image: traefik:3
              restart: unless-stopped
              command:
                - "--log.level=DEBUG"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.cf.acme.dnschallenge=true"
                - "--certificatesresolvers.cf.acme.dnschallenge.provider=cloudflare"
                - "--certificatesresolvers.cf.acme.email=${LE_EMAIL}"
                - "--certificatesresolvers.cf.acme.storage=/letsencrypt/acme.json"
              environment:
                CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN}
                LE_EMAIL: ${LE_EMAIL}
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - "/var/run/docker.sock:/var/run/docker.sock:ro"
                - "le:/letsencrypt"

          volumes:
            db_data:
            uploads:
            le:
          COMPOSE

          # ---------- .env (only interpolation‑safe vars) ----------
          cat > .env <<ENV
          CLOUDFLARE_DNS_API_TOKEN=${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
          LE_EMAIL=${{ secrets.LE_EMAIL }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          ENV

          # ---------- stack.env (salts & keys, $ → $$) ----------
          cat > stack.env <<'STACK'
          AUTH_KEY=${{ secrets.AUTH_KEY }}
          SECURE_AUTH_KEY=${{ secrets.SECURE_AUTH_KEY }}
          LOGGED_IN_KEY=${{ secrets.LOGGED_IN_KEY }}
          NONCE_KEY=${{ secrets.NONCE_KEY }}
          AUTH_SALT=${{ secrets.AUTH_SALT }}
          SECURE_AUTH_SALT=${{ secrets.SECURE_AUTH_SALT }}
          LOGGED_IN_SALT=${{ secrets.LOGGED_IN_SALT }}
          NONCE_SALT=${{ secrets.NONCE_SALT }}
          STACK
          perl -pi -e 's/\$/\$\$/g' stack.env    # escape $ for Compose

          docker compose pull
          docker compose up -d --remove-orphans

    # ────────────────── 6 · WP‑CLI tidy‑up ─────────────
    - name: One‑shot WP‑CLI maintenance
      uses: appleboy/ssh-action@v1
      if: success()
      with:
        host:     ${{ secrets.DO_HOST }}
        username: root
        key:      ${{ secrets.DO_SSH_KEY }}
        script: |
          set -eu
          cd /srv/consultancy
          docker compose exec --user www-data wordpress \
            wp plugin delete hello || true
          docker compose exec --user www-data wordpress \
            wp plugin update --all || true
          if ! docker compose exec --user www-data wordpress \
               wp plugin is-installed wp-super-cache > /dev/null 2>&1 ; then
            docker compose exec --user www-data wordpress \
              wp plugin install wp-super-cache --activate
          fi
