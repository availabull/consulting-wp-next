name: Deploy stack

on:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  packages: write           # allow pushing to GHCR
jobs:
# ────────────────────────── LINT JOBS ──────────────────────────
  lint-nextjs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install dependencies (required for lint)
        working-directory: nextjs-site
        run: |
          corepack enable pnpm
          pnpm install --frozen-lockfile
      - name: Run pnpm lint
        working-directory: nextjs-site
        run: pnpm lint

  lint-wordpress:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with: { php-version: '8.1' }
      - name: Install dependencies
        working-directory: wordpress
        run: composer install --no-interaction
      - name: Run composer lint
        working-directory: wordpress
        run: composer lint

# ─────────────────────────── DEPLOY ────────────────────────────
  deploy:
    runs-on: ubuntu-latest
    needs: [ lint-nextjs, lint-wordpress ]

    steps:
    - uses: actions/checkout@v4

    # ---------- 1. Build images & push to GHCR ----------
    - name: Log in to GHCR
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build & push WordPress
      run: |
        docker build -t ghcr.io/${{ github.repository }}/wp:${{ github.sha }} wordpress
        docker push ghcr.io/${{ github.repository }}/wp:${{ github.sha }}

    - name: Build & push Next.js
      run: |
        docker build \
          --build-arg NEXT_PUBLIC_WPGRAPHQL_URL=https://wp.robertfisher.com/graphql \
          -t ghcr.io/${{ github.repository }}/next:${{ github.sha }} nextjs-site
        docker push ghcr.io/${{ github.repository }}/next:${{ github.sha }}

    # ---------- 2. Provision droplet & write files ----------
    - name: Deploy on droplet
      uses: appleboy/ssh-action@v1
      with:
        host:     ${{ secrets.DO_HOST }}
        username: root
        key:      ${{ secrets.DO_SSH_KEY }}
        timeout: "1200s"          # ← duration must include unit
        command_timeout: "1200s"
        script: |
          set -eu
          mkdir -p /srv/consultancy
          cd /srv/consultancy

          # housekeeping – weekly docker‑prune
          if [ ! -f /etc/cron.weekly/docker-prune ]; then
            printf '%s\n' '#!/usr/bin/env bash' \
              'docker image prune -af --filter "until=168h"' \
              > /etc/cron.weekly/docker-prune
            chmod +x /etc/cron.weekly/docker-prune
          fi
          docker image prune -af || true

          # -------- docker‑compose.yml --------
          cat > docker-compose.yml <<'COMPOSE'
          services:
            db:
              image: mariadb:11
              restart: unless-stopped
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                MYSQL_DATABASE: wp
              volumes: [ "db_data:/var/lib/mysql" ]

            wordpress:
              image: ghcr.io/${{ github.repository }}/wp:${{ github.sha }}
              restart: unless-stopped
              env_file: [ ".env", "stack.env" ]
              environment:
                DB_NAME: wp
                DB_USER: root
                DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                DB_HOST: db
                WP_ENV: production
                WP_HOME: https://wp.robertfisher.com
                WP_SITEURL: https://wp.robertfisher.com/wp
              expose: [ "80" ]
              volumes: [ "uploads:/var/www/html/web/app/uploads" ]
              labels:
                - traefik.enable=true
                - traefik.http.routers.wp.rule=Host(`wp.robertfisher.com`)
                - traefik.http.routers.wp.entrypoints=websecure
                - traefik.http.routers.wp.tls.certresolver=cf
                - traefik.http.services.wp.loadbalancer.server.port=80
              depends_on: [ db ]

            next:
              image: ghcr.io/${{ github.repository }}/next:${{ github.sha }}
              restart: unless-stopped
              environment:
                NEXT_PUBLIC_WPGRAPHQL_URL: https://wp.robertfisher.com/graphql
              expose: [ "3000" ]
              labels:
                - traefik.enable=true
                - traefik.http.routers.next.rule=Host(`robertfisher.com`) || Host(`www.robertfisher.com`)
                - traefik.http.routers.next.entrypoints=websecure
                - traefik.http.routers.next.tls.certresolver=cf
                - traefik.http.services.next.loadbalancer.server.port=3000
              depends_on: [ wordpress ]

            traefik:
              image: traefik:3
              restart: unless-stopped
              command:
                - "--log.level=DEBUG"
                - "--providers.docker=true"
                - "--providers.docker.exposedbydefault=false"
                - "--entrypoints.web.address=:80"
                - "--entrypoints.websecure.address=:443"
                - "--certificatesresolvers.cf.acme.dnschallenge=true"
                - "--certificatesresolvers.cf.acme.dnschallenge.provider=cloudflare"
                - "--certificatesresolvers.cf.acme.email=${LE_EMAIL}"
                - "--certificatesresolvers.cf.acme.storage=/letsencrypt/acme.json"
              environment:
                CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN}
                LE_EMAIL: ${LE_EMAIL}
              ports:
                - "80:80"
                - "443:443"
              volumes:
                - "/var/run/docker.sock:/var/run/docker.sock:ro"
                - le:/letsencrypt
          volumes:
            db_data:
            uploads:
            le:
          COMPOSE

          # -------- .env & stack.env --------
          cat > .env <<ENV
          CLOUDFLARE_DNS_API_TOKEN=${{ secrets.CLOUDFLARE_DNS_API_TOKEN }}
          LE_EMAIL=${{ secrets.LE_EMAIL }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          ENV

          cat > stack.env <<'STACK'
          AUTH_KEY=${{ secrets.AUTH_KEY }}
          SECURE_AUTH_KEY=${{ secrets.SECURE_AUTH_KEY }}
          LOGGED_IN_KEY=${{ secrets.LOGGED_IN_KEY }}
          NONCE_KEY=${{ secrets.NONCE_KEY }}
          AUTH_SALT=${{ secrets.AUTH_SALT }}
          SECURE_AUTH_SALT=${{ secrets.SECURE_AUTH_SALT }}
          LOGGED_IN_SALT=${{ secrets.LOGGED_IN_SALT }}
          NONCE_SALT=${{ secrets.NONCE_SALT }}
          STACK
          perl -pi -e 's/\$/\$\$/g' stack.env   # escape $ for env‑file

          # -------- helper script --------
          mkdir -p /srv/consultancy/bin
          cat > /srv/consultancy/bin/wp-bootstrap.sh <<'BOOT'
          #!/usr/bin/env bash
          set -eu

          echo -n "Waiting for MariaDB … "
          source /srv/consultancy/.env
          for i in {1..30}; do
            if docker compose exec db \
                 mysqladmin --silent ping -h127.0.0.1 \
                            -uroot -p"$MYSQL_ROOT_PASSWORD" >/dev/null 2>&1; then
              echo "ok"; break
            fi
            printf '.'; sleep 2
            [ "$i" -eq 30 ] && { echo " timed out"; exit 1; }
          done

          docker compose exec wordpress bash -c '
            cd /var/www/html/web &&
            wp core is-installed --allow-root || wp core install \
              --url=https://wp.robertfisher.com \
              --title="Production Site" \
              --admin_user=${WP_ADMIN_USER:-admin} \
              --admin_password=${WP_ADMIN_PASS:-changeme} \
              --admin_email=${WP_ADMIN_EMAIL:-you@example.com} \
              --skip-email --allow-root &&
            wp option update permalink_structure "/%postname%/" --allow-root &&
            wp plugin activate wp-graphql --allow-root &&
            wp rewrite flush --hard --allow-root
          '
          BOOT
          chmod +x /srv/consultancy/bin/wp-bootstrap.sh

          docker compose pull
          docker compose up -d --remove-orphans
          /srv/consultancy/bin/wp-bootstrap.sh

    # ---------- 3. One‑shot WP‑CLI maintenance ----------
    - name: WordPress housekeeping
      uses: appleboy/ssh-action@v1
      if: success()
      with:
        host:     ${{ secrets.DO_HOST }}
        username: root
        key:      ${{ secrets.DO_SSH_KEY }}
        timeout: "1200s"
        command_timeout: "1200s"
        script: |
          set -eu
          cd /srv/consultancy
          docker compose exec --user www-data wordpress wp plugin delete hello || true
          docker compose exec --user www-data wordpress wp plugin update --all || true
          docker compose exec --user www-data wordpress wp theme  update --all || true
          docker compose exec --user www-data wordpress wp plugin activate wp-graphql || true
          if ! docker compose exec --user www-data wordpress wp plugin is-installed wp-super-cache >/dev/null 2>&1; then
            docker compose exec --user www-data wordpress wp plugin install wp-super-cache --activate
          fi
          docker compose exec --user www-data wordpress wp theme install hello-elementor --activate || true
          docker compose exec --user www-data wordpress wp theme delete $(docker compose exec --user www-data wordpress wp theme list --status=inactive --field=name | grep '^twenty' || true) || true
