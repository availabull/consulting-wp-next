# docker‑compose.yml  ── local dev & staging
version: "3.9"

services:
  # ──────────────────────────────── MariaDB ────────────────────────────────
  db:
    image: mariadb:11
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
      MYSQL_DATABASE: wp
    volumes:
      - db_data:/var/lib/mysql

  # ─────────────────────────────── WordPress ───────────────────────────────
  wordpress:
    build: ./wordpress                    # custom Dockerfile (GraphQL baked in)
    restart: unless-stopped
    expose:
      - "80"                              # Traefik sees the container on port 80
    environment:
      DB_NAME:     wp
      DB_USER:     root
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
      DB_HOST:     db
      WP_ENV:      ${WP_ENV:-development}
      WP_HOME:     ${WP_HOME:-http://localhost:8080}
      WP_SITEURL:  ${WP_SITEURL:-http://localhost:8080/wp}
    volumes:
      - uploads:/var/www/html/web/app/uploads
    labels:
      - traefik.enable=true
      # ── Production mapping (Cloudflare certs):
      - traefik.http.routers.wp.rule=Host(`wp.robertfisher.com`)
      - traefik.http.routers.wp.entrypoints=websecure
      - traefik.http.routers.wp.tls.certresolver=cf
      - traefik.http.services.wp.loadbalancer.server.port=80
      # ── Local shortcuts (no TLS):
      - traefik.http.routers.wp-local.rule=Host(`localhost`) && ( PathPrefix(`/wp`) || PathPrefix(`/graphql`) || Path(`/favicon.ico`) )
      - traefik.http.routers.wp-local.entrypoints=web
      - traefik.http.routers.wp-local.priority=12
    depends_on:
      - db

  # ──────────────────────────────── Next.js ────────────────────────────────
  next:
    build:
      context: ./nextjs-site
      args:                                    # ← build‑time injection
        NEXT_PUBLIC_WPGRAPHQL_URL: http://wordpress/graphql
    restart: unless-stopped
    expose:
      - "3000"                                # internal port (Traefik & other containers)
    ports:                                     # ← OPTIONAL host mapping
      - "3000:3000"                            # comment‑out for CI / prod if not wanted
    environment:                              # ← runtime injection
      NEXT_PUBLIC_WPGRAPHQL_URL: http://wordpress/graphql
    labels:
      - traefik.enable=true
      # ── Production mapping (TLS via Traefik):
      - traefik.http.routers.next.rule=Host(`robertfisher.com`) || Host(`www.robertfisher.com`)
      - traefik.http.routers.next.entrypoints=websecure
      - traefik.http.routers.next.tls.certresolver=cf
      - traefik.http.services.next.loadbalancer.server.port=3000
      # ── Local shortcut (plain HTTP on port 80 handled by Traefik):
      - traefik.http.routers.next-local.rule=Host(`localhost`)
      - traefik.http.routers.next-local.entrypoints=web
      - traefik.http.routers.next-local.priority=10
      - traefik.http.services.next.loadbalancer.server.port=3000
    depends_on:
      - wordpress

  # ──────────────────────────────── Traefik ────────────────────────────────
  traefik:
    image: traefik:3
    restart: unless-stopped
    command:
      - "--log.level=DEBUG"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.cf.acme.dnschallenge=true"
      - "--certificatesresolvers.cf.acme.dnschallenge.provider=cloudflare"
      - "--certificatesresolvers.cf.acme.email=${LE_EMAIL:-local@example.com}"
      - "--certificatesresolvers.cf.acme.storage=/letsencrypt/acme.json"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN:-dev}
      LE_EMAIL: ${LE_EMAIL:-local@example.com}
    ports:
      - "80:80"      # Traefik dashboard + local routes
      - "8080:80"    # Extra host port → WordPress admin on :8080
      - "443:443"    # HTTPS for production
      - "8443:443"   # Optional secondary HTTPS
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - le:/letsencrypt

# ──────────────────────────────── Volumes ────────────────────────────────
volumes:
  db_data:
  uploads:
  le:
