# docker-compose.yml — local dev & staging
version: "3.9"

services:
  db:
    image: mariadb:11
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
      MYSQL_DATABASE: wp
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 6

  wordpress:
    build: ./wordpress
    restart: unless-stopped
    expose: ["80"]
    environment:
      DB_NAME: wp
      DB_USER: root
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD:-secret}
      DB_HOST: db
      WP_ENV: ${WP_ENV:-development}
      WP_HOME: ${WP_HOME:-http://localhost:8000}
      WP_SITEURL: ${WP_SITEURL:-http://localhost:8000/wp}
    volumes:
      - uploads:/var/www/html/web/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost/graphql?query=%7B__typename%7D || exit 1"]
      interval: 10s
      retries: 30
    labels:
      - traefik.enable=true
      - traefik.http.routers.wp.rule=Host(`wp.${DOMAIN:-example.com}`)
      - traefik.http.routers.wp.entrypoints=websecure
      - traefik.http.routers.wp.tls.certresolver=cf
      - traefik.http.services.wp.loadbalancer.server.port=80
      - traefik.http.routers.wp-local.rule=(Host(`localhost`) || Host(`127.0.0.1`)) && (PathPrefix(`/wp`) || PathPrefix(`/graphql`) || Path(`/favicon.ico`))
      - traefik.http.routers.wp-local.entrypoints=web
      - traefik.http.routers.wp-local.priority=12
    depends_on:
      db: { condition: service_healthy }

  next:
    build:
      context: ./nextjs-site
      args:
        NEXT_PUBLIC_WPGRAPHQL_URL: http://wordpress/wp/graphql
    restart: unless-stopped
    expose: ["3000"]
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_WPGRAPHQL_URL: http://wordpress/wp/graphql
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 10s
      retries: 30
    labels:
      - traefik.enable=true
      - traefik.http.routers.next.rule=Host(`${DOMAIN:-example.com}`) || Host(`www.${DOMAIN:-example.com}`)
      - traefik.http.routers.next.entrypoints=websecure
      - traefik.http.routers.next.tls.certresolver=cf
      - traefik.http.services.next.loadbalancer.server.port=3000
      - traefik.http.routers.next-local.rule=Host(`localhost`)
      - traefik.http.routers.next-local.entrypoints=web
      - traefik.http.routers.next-local.priority=10
    depends_on:
      wordpress: { condition: service_started }

  traefik:
    image: traefik:v2.11
    restart: unless-stopped
    init: true
    entrypoint:
      - /bin/sh
      - -c
      - |
        touch /letsencrypt/acme.json
        chmod 600 /letsencrypt/acme.json
        exec traefik "$@"
    depends_on:
      next:      { condition: service_healthy }
      wordpress: { condition: service_healthy }
    command:
      - --log.level=DEBUG
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.cf.acme.dnschallenge=true
      - --certificatesresolvers.cf.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.cf.acme.email=${LE_EMAIL:-local@example.com}
      - --certificatesresolvers.cf.acme.storage=/letsencrypt/acme.json
      # ── wildcard / multi‑SAN flags (new) ─────────────────────────
      - --certificatesresolvers.cf.acme.domains[0].main=${DOMAIN:-example.com}
      - --certificatesresolvers.cf.acme.domains[0].sans=*.${DOMAIN:-example.com}
    environment:
      CLOUDFLARE_DNS_API_TOKEN: ${CLOUDFLARE_DNS_API_TOKEN:-dev}
      LE_EMAIL: ${LE_EMAIL:-local@example.com}
    ports:
      - "80:80"
      - "8000:80"
      - "443:443"
      - "8443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - le:/letsencrypt

volumes:
  db_data:
  uploads:
  le:
